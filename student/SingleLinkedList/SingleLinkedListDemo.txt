// SingleLinkedList Example (with Interface)

public class SingleLinkedListDemo {
    public static void main(String[] args) {
        LinkedList list = new SingleLinkedList();
        list.add(10);
        list.add(20);
        list.add(30);
        System.out.println("Element at index 0: " + list.at(0));
        System.out.println("Element at index 1: " + list.at(1));
        System.out.println("Element at index 2: " + list.at(2));
        list.remove(1);
        System.out.println("Element at index 1 after removal: " + list.at(1));
        System.out.println("Size: " + list.size());
    }
}

interface LinkedList {
    int at(int index);
    void add(int value);
    void remove(int index);
    int size();
}

class SingleLinkedList implements LinkedList {
    private Node head;
    private int size;

    private class Node {
        int value;
        Node next;
        Node(int value) {
            this.value = value;
            this.next = null;
        }
    }

    @Override
    public int at(int index) {
        if (index < 0 || index >= size) return -1;
        Node current = head;
        int count = 0;
        while (current != null) {
            if (count == index) {
                return current.value;
            }
            current = next(current);
            count++;
        }
        return -1;
    }

    @Override
    public void add(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = next(current);
            }
            current.next = newNode;
        }
        size++;
    }

    @Override
    public void remove(int index) {
        if (index < 0 || index >= size) {
            System.out.println("Index out of bound");
            return;
        }
        if (index == 0) {
            head = head.next;
        } else {
            Node current = head;
            for (int i = 0; i < index - 1; i++) {
                current = next(current);
            }
            current.next = next(current.next);
        }
        size--;
    }

    @Override
    public int size() {
        return size;
    }

    private Node next(Node node) {
        System.out.println("Go to next node");
        return node.next;
    }
}


// =============================================================================
public class SingleLinkedList {
    private Node head;

    // Inner Node class
    private static class Node {
        int value;
        Node next;
        Node(int value) {
            this.value = value;
            this.next = null;
        }
    }

    // Add method: adds a value to the end
    public void add(int value) {
        Node newNode = new Node(value);       // Create a new node

        if (head == null) {                   // If list is empty
            head = newNode;
        } else {                              // Otherwise, find last node
            Node current = head;
            while (current.next != null) {    // Traverse till last node
                current = current.next;
            }
            current.next = newNode;           // Add new node at the end
        }
    }

    // Helper to print the list (for visualization)
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.value + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    // Main method - you can paste this code to a visualizer!
    public static void main(String[] args) {
        SingleLinkedList list = new SingleLinkedList();
        list.add(5);
        list.add(7);
        list.add(9);

        list.printList();  // Output: 5 -> 7 -> 9 -> null
    }
}

